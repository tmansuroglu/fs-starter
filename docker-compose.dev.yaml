services:
  # PostgreSQL for development
  db:
    image: postgres:15 # Use official Postgres image
    container_name: pg # Optional: name the container
    restart: unless-stopped # Restart unless manually stopped (safer than always)
    env_file:
      - .env.dev
    ports:
      - "${DB_PORT}:${DB_PORT}" # Expose PostgreSQL to localhost for tools
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist Postgres data locally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    container_name: local-redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data

  # Node.js app container for development
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: app-dev # Name the dev container
    depends_on:
      db: # Wait for db to be started
        condition: service_healthy
    ports:
      - "${PORT}:${PORT}" # Expose app on localhost:3000
    #¬†// TODO: This might be needed for prod (dotenv thing)
    command: sh -c "npm run migrate && npm run generate && npm run dev" # üß† Start dev server with hot reload
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    environment:
      NODE_ENV: development # Ensure app runs in development mode
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    env_file:
      - .env.dev # üîê Secure secrets file (do NOT commit)

volumes:
  pgdata:
  redis-data:
